%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Create output files in the current directory
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Configuration Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Size of the Grid in grid points
numgpx = 32;
numgpy = 16;
numgpz = 16;

% Number of particles
nump = 4096;

% Number of nearest neighbors in one dimension
nnn1d = 4;

% alpha
%alpha = 3/2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Derived Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Grid coordinate address widths
xaddrw = ceil(log2(numgpx));
yaddrw = ceil(log2(numgpy));
zaddrw = ceil(log2(numgpz));

% Particle Memory data width
pmemw = xaddrw + yaddrw + zaddrw + 3*27 + 32;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Greens ROM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialize empty array of doubles to keep as much precision as possible
grom = double(zeros([numgpx, numgpy, numgpz]));

% Get Greens ROM values from separate script partially generated by OpenMM
run new_greens_rom.m

% Caste as single to match hardware storage precision
grom = single(grom);

% Create Verilog header file for clustered grid ROM
file0 = fopen('./clustered_greens_rom.svh', 'w');

fprintf(file0, 'localparam [NNN1D-1:0][NNN1D-1:0][NNN1D-1:0][BMEMD-1:0][31:0] ROMVAL = {\n');

for ii = nnn1d:-1:1
  for jj = nnn1d:-1:1
    for kk = nnn1d:-1:1
      for ll = numgpz/nnn1d:-1:1
        for mm = numgpy/nnn1d:-1:1
          for nn = numgpx/nnn1d:-1:1
            indxx = (nn-1)*nnn1d+kk;
            indxy = (mm-1)*nnn1d+jj;
            indxz = (ll-1)*nnn1d+ii;

            rtmp = num2hex(real(grom(indxx,indxy,indxz)));

            fprintf(file0, '  32''h%s /* (%0d, %0d, %0d) */', rtmp, indxx-1, indxy-1, indxz-1);

            if (indxx==1) && (indxy==1) && (indxz==1)
              fprintf(file0, '};\n');
            else
              fprintf(file0, ',\n');
            end
          end
        end
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Particle-to-Grid Polynomial Matrix
p2gmat = double(zeros([4, 4]));

% Use Cardinal B-Splines from OpenMM
p2gmat(1,:) =  1/6*[ -1.0,   3.0,  -3.0,   1.0];
p2gmat(2,:) =  1/6*[  3.0,  -6.0,   0.0,   4.0];
p2gmat(3,:) =  1/6*[ -3.0,   3.0,   3.0,   1.0];
p2gmat(4,:) =  1/6*[  1.0,   0.0,   0.0,   0.0];

% Grid-to-Particle Polynomial Matrix
g2pmat = double(zeros([4, 4]));

% Use Cardinal B-Splines from OpenMM
g2pmat(1,:) =  1/6*[  0.0,  -3.0,   6.0, -3.0];
g2pmat(2,:) =  1/6*[  0.0,   9.0, -12.0,  0.0];
g2pmat(3,:) =  1/6*[  0.0,  -9.0,   6.0,  3.0];
g2pmat(4,:) =  1/6*[  0.0,   3.0,   0.0,  0.0];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generate Particle Information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
file0 = fopen('./particle_info.svh', 'w');

fprintf(file0, 'localparam NUMP = 32''d%0d;\n\n', nump);

fprintf(file0, 'localparam [0:%0d][%0d:0] P_INFO = {\n', nump-1, pmemw-1);	

% Get Greens ROM values from separate script partially generated by OpenMM
run posq.m

for ll = 0:nump-1

  fprintf(file0, '  %0d''d%0d, 27''h%s, %0d''d%0d, 27''h%s, %0d''d%0d, 27''h%s, 32''h%s', zaddrw, p_z(ll+1), hex(p_oi_z(ll+1)), yaddrw, p_y(ll+1), hex(p_oi_y(ll+1)), xaddrw, p_x(ll+1), hex(p_oi_x(ll+1)), hex(p_q(ll+1)));
  if (ll == nump-1)
    fprintf(file0, '};\n');
  else
    fprintf(file0, ',\n');
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generate Particle Information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gmem = single(zeros([numgpx, numgpy, numgpz]));

for ii = 1:nump
  for jj = -1:nnn1d-2
    for kk = -1:nnn1d-2
      for ll = -1:nnn1d-2
        temp =        (single(p_oi_x.data(ii))^3*p2gmat(jj+2,1) + single(p_oi_x.data(ii))^2*p2gmat(jj+2,2) + single(p_oi_x.data(ii))*p2gmat(jj+2,3) + p2gmat(jj+2,4));
        temp = temp * (single(p_oi_y.data(ii))^3*p2gmat(kk+2,1) + single(p_oi_y.data(ii))^2*p2gmat(kk+2,2) + single(p_oi_y.data(ii))*p2gmat(kk+2,3) + p2gmat(kk+2,4));
        temp = temp * (single(p_oi_z.data(ii))^3*p2gmat(ll+2,1) + single(p_oi_z.data(ii))^2*p2gmat(ll+2,2) + single(p_oi_z.data(ii))*p2gmat(ll+2,3) + p2gmat(ll+2,4));
        temp = temp * (single(p_q.data(ii)));
        gmem((mod((p_x(ii)+jj), numgpx)+1), (mod((p_y(ii)+kk), numgpy)+1), (mod((p_z(ii)+ll), numgpz)+1)) = gmem((mod((p_x(ii)+jj), numgpx)+1), (mod((p_y(ii)+kk), numgpy)+1), (mod((p_z(ii)+ll), numgpz)+1)) + temp;
      end
    end
  end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Grid Value Check
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%file0 = fopen('../../tb/include/gmem_map_check_values.svh', 'w');
file0 = fopen('./gmem_map_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_CMAP_CHK = {\n');
for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(gmem(ii,jj,kk)));
      itmp = num2hex(single(0));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFT Prep
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Resize grid for proper FFT
mappedC = gmem;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTX Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in X dimension
fftx = fft(mappedC, numgpx, 1);

% Create Verilog header file
file0 = fopen('./gmem_fftx_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_FFTX_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(fftx(ii,jj,kk)));
      itmp = num2hex(imag(fftx(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTY Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in Y dimension
ffty = fft(fftx, numgpy, 2);

% Create Verilog header file
file0 = fopen('./gmem_ffty_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_FFTY_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(ffty(ii,jj,kk)));
      itmp = num2hex(imag(ffty(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTZ Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in Z dimension
fftz = fft(ffty, numgpz, 3);

% Apply Greens Function
fftzng = fftz.*grom;

% Create Verilog header file
file0 = fopen('./gmem_fftz_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_FFTZ_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(fftzng(ii,jj,kk)));
      itmp = num2hex(imag(fftzng(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTX Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in X dimension
ifftx = ifft(fftzng, numgpx, 1);

% Create Verilog header file
file0 = fopen('./gmem_ifftx_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_IFFTX_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(ifftx(ii,jj,kk)));
      itmp = num2hex(imag(ifftx(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTY Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in Y dimension
iffty = ifft(ifftx, numgpy, 2);

% Create Verilog header file
file0 = fopen('./gmem_iffty_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_IFFTY_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(iffty(ii,jj,kk)));
      itmp = num2hex(imag(iffty(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTZ Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in Z dimension
ifftz = ifft(iffty, numgpz, 3);

% To save on C-based simulation runtime, the Greens ROM values in OpenMM were
% not multiplied by numgpx*numgpy*numgpz and the 3 1D FFT algorithms did not
% not divide by numgpx, numgpy, and numgpz, where appropriate. Since the FFT
% calls in MATLAB inherently perfrom the division, compensate for OpenMM
% adjustments by multiplying result of 3D FFT by numgpx*numgpy*numgpz
ifftz = ifftz*numgpx*numgpy*numgpz;

% Create Verilog header file
file0 = fopen('./gmem_ifftz_check_values.svh', 'w');

fprintf(file0, 'localparam [GSIZE1DX-1:0][GSIZE1DY-1:0][GSIZE1DZ-1:0][1:0][31:0] GMEM_IFFTZ_CHK = {\n');

for ii = numgpx:-1:1
  for jj = numgpy:-1:1
    for kk = numgpz:-1:1
      rtmp = num2hex(real(ifftz(ii,jj,kk)));
      itmp = num2hex(imag(ifftz(ii,jj,kk)));
      fprintf(file0, '  {32''h%s, 32''h%s} /* (%0d, %0d, %0d) {real, imag} */', rtmp, itmp, ii-1, jj-1, kk-1);
      if (ii==1) && (jj==1) && (kk==1)
        fprintf(file0, '};\n');
      else
        fprintf(file0, ',\n');
      end
    end
  end
end

fclose(file0);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Force Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pad the now potential grid with periodic repititon of 2D matricies so that
% we do not need to perform boundary checks when applying force coefficients
potmem = cat(1,  ifftz(numgpx,      :,      :),  ifftz,  ifftz(1:3,   :,   :));
potmem = cat(2, potmem(     :, numgpy,      :), potmem, potmem(  :, 1:3,   :));
potmem = cat(3, potmem(     :,      :, numgpz), potmem, potmem(  :,   :, 1:3));

% Create a nump by nnn1d by nnn1d by nnn1d matrix to hold force coefficients
% for each particle
fmemx = single(zeros([nump, nnn1d, nnn1d, nnn1d]));
fmemy = single(zeros([nump, nnn1d, nnn1d, nnn1d]));
fmemz = single(zeros([nump, nnn1d, nnn1d, nnn1d]));

for ii = 1:nump
  for jj = 1:nnn1d
    for kk = 1:nnn1d
      for ll = 1:nnn1d
        fmemx(ii, jj, kk, ll) =                         (single(p_oi_x.data(ii))^3*g2pmat(jj,1) + single(p_oi_x.data(ii))^2*g2pmat(jj,2) + single(p_oi_x.data(ii))*g2pmat(jj,3) + g2pmat(jj,4));
        fmemx(ii, jj, kk, ll) = fmemx(ii, jj, kk, ll) * (single(p_oi_y.data(ii))^3*p2gmat(kk,1) + single(p_oi_y.data(ii))^2*p2gmat(kk,2) + single(p_oi_y.data(ii))*p2gmat(kk,3) + p2gmat(kk,4));
        fmemx(ii, jj, kk, ll) = fmemx(ii, jj, kk, ll) * (single(p_oi_z.data(ii))^3*p2gmat(ll,1) + single(p_oi_z.data(ii))^2*p2gmat(ll,2) + single(p_oi_z.data(ii))*p2gmat(ll,3) + p2gmat(ll,4));

        fmemy(ii, jj, kk, ll) =                         (single(p_oi_x.data(ii))^3*p2gmat(jj,1) + single(p_oi_x.data(ii))^2*p2gmat(jj,2) + single(p_oi_x.data(ii))*p2gmat(jj,3) + p2gmat(jj,4));
        fmemy(ii, jj, kk, ll) = fmemy(ii, jj, kk, ll) * (single(p_oi_y.data(ii))^3*g2pmat(kk,1) + single(p_oi_y.data(ii))^2*g2pmat(kk,2) + single(p_oi_y.data(ii))*g2pmat(kk,3) + g2pmat(kk,4));
        fmemy(ii, jj, kk, ll) = fmemy(ii, jj, kk, ll) * (single(p_oi_z.data(ii))^3*p2gmat(ll,1) + single(p_oi_z.data(ii))^2*p2gmat(ll,2) + single(p_oi_z.data(ii))*p2gmat(ll,3) + p2gmat(ll,4));

        fmemz(ii, jj, kk, ll) =                         (single(p_oi_x.data(ii))^3*p2gmat(jj,1) + single(p_oi_x.data(ii))^2*p2gmat(jj,2) + single(p_oi_x.data(ii))*p2gmat(jj,3) + p2gmat(jj,4));
        fmemz(ii, jj, kk, ll) = fmemz(ii, jj, kk, ll) * (single(p_oi_y.data(ii))^3*p2gmat(kk,1) + single(p_oi_y.data(ii))^2*p2gmat(kk,2) + single(p_oi_y.data(ii))*p2gmat(kk,3) + p2gmat(kk,4));
        fmemz(ii, jj, kk, ll) = fmemz(ii, jj, kk, ll) * (single(p_oi_z.data(ii))^3*g2pmat(ll,1) + single(p_oi_z.data(ii))^2*g2pmat(ll,2) + single(p_oi_z.data(ii))*g2pmat(ll,3) + g2pmat(ll,4));
      end
    end
  end
end


for ii = 1:nump
  p_f_x(ii) = sum((squeeze(fmemx(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
  p_f_y(ii) = sum((squeeze(fmemy(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
  p_f_z(ii) = sum((squeeze(fmemz(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
end


file0 = fopen('./force_info.svh', 'w');

fprintf(file0, 'localparam [0:%0d][0:2][31:0] P_FORCE = {\n', nump-1);	

for ii = 1:nump
  tmpx = num2hex(p_f_x(ii));
  tmpy = num2hex(p_f_y(ii));
  tmpz = num2hex(p_f_z(ii));
  fprintf(file0, '  {32''h%s, 32''h%s, 32''h%s}', tmpx, tmpy, tmpz);
  if (ii == nump)
    fprintf(file0, '};\n');
  else
    fprintf(file0, ',\n');
  end
end

fclose(file0);
