%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Configuration Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Size of the Grid in grid points
numgpx = 16;
numgpy = 16;
numgpz = 16;

% Size of the grid in Angstroms
%numAx = 34;
%numAy = 34;
%numAz = 34;

% Number of particles
nump = 4096;

% Number of nearest neighbors in one dimension
nnn1d = 4;

% alpha
%alpha = 3/2;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Derived Parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Grid coordinate address widths
xaddrw = ceil(log2(numgpx));
yaddrw = ceil(log2(numgpy));
zaddrw = ceil(log2(numgpz));

% Unit cell size in cubed meters
%V = numAx*10^(-10) * numAy*10^(-10) * numAz*10^(-10) / (numgpx*numgpy*numgpz);
%V = numAx * numAy * numAz / (numgpx*numgpy*numgpz);

% Particle Memory data width
%pmemw = xaddrw + yaddrw + zaddrw + 3*27 + 32;

% Number of nearest neighbors in three dimensions
%nnn3d = nnn1d^3;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Greens ROM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initialize empty array of doubles to keep as much precision as possible
grom = double(zeros([numgpx, numgpy, numgpz]));

%for ii = 1:numgpx
%  for jj = 1:numgpy
%    for kk = 1:numgpz
%      % Calculated m squared
%      m2 = (ii)^2 + (jj)^2 + (kk)^2;

%      % Calculate 'C'
%      grom(ii, jj, kk) = 1/(pi*V)*exp(-1*pi^2*m2/alpha^2)/m2;
%    end
%  end
%end

% Compute 3D FFT of C
%grom = fft(grom, numgpx, 1);
%grom = fft(grom, numgpy, 2);
%grom = fft(grom, numgpz, 3);

% Get Greens ROM values from separate script partially generated by OpenMM
run greens_rom.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constants
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Particle-to-Grid Polynomial Matrix
p2gmat = double(zeros([4, 4]));
%p2gmat(1,:) =  [-0.5,  1.0, -0.5,  0.0];
%p2gmat(2,:) =  [ 1.5, -2.5,  0.0,  1.0];
%p2gmat(3,:) =  [-1.5,  2.0,  0.5,  0.0];
%p2gmat(4,:) =  [ 0.5, -0.5,  0.0,  0.0];

% Use Cardinal B-Splines from OpenMM
p2gmat(1,:) =  1/6*[ -1.0,   3.0,  -3.0,   1.0];
p2gmat(2,:) =  1/6*[  3.0,  -6.0,   0.0,   4.0];
p2gmat(3,:) =  1/6*[ -3.0,   3.0,   3.0,   1.0];
p2gmat(4,:) =  1/6*[  1.0,   0.0,   0.0,   0.0];

% Grid-to-Particle Polynomial Matrix
g2pmat = double(zeros([4, 4]));
%g2pmat(1,:) =  [  0.0, -1.5,  2.0, -0.5];
%g2pmat(2,:) =  [  0.0,  4.5, -5.0,  0.0];
%g2pmat(3,:) =  [  0.0, -4.5,  4.0,  0.5];
%g2pmat(4,:) =  [  0.0,  1.5, -1.0,  0.0];

% Use Cardinal B-Splines from OpenMM
g2pmat(1,:) =  1/6*[  0.0,  -3.0,   6.0, -3.0];
g2pmat(2,:) =  1/6*[  0.0,   9.0, -12.0,  0.0];
g2pmat(3,:) =  1/6*[  0.0,  -9.0,   6.0,  3.0];
g2pmat(4,:) =  1/6*[  0.0,   3.0,   0.0,  0.0];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generate Particle Information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%for ll = 0:nump-1
%  kk = mod(2*ll, numgpx)+1;
%  jj = mod(2*floor(2*ll/numgpx), numgpy)+1;
%  ii = mod(2*floor(2*floor(2*ll/numgpx)/numgpy), numgpz)+1;

%  p_x(ll+1) = randi(numgpx-3);
%  p_y(ll+1) = randi(numgpy-3);
%  p_z(ll+1) = randi(numgpz-3);

%  p_oi_x(ll+1) = rand;
%  p_oi_y(ll+1) = rand;
%  p_oi_z(ll+1) = rand;

%  p_q(ll+1) = 2*rand;

%end

% Get Greens ROM values from separate script partially generated by OpenMM
run posq_dpfp.m

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generate Particle Information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
gmem = double(zeros([numgpx, numgpy, numgpz]));

for ii = 1:nump
  for jj = -1:nnn1d-2
    for kk = -1:nnn1d-2
      for ll = -1:nnn1d-2
        temp =        (double(p_oi_x(ii))^3*p2gmat(jj+2,1) + double(p_oi_x(ii))^2*p2gmat(jj+2,2) + double(p_oi_x(ii))*p2gmat(jj+2,3) + p2gmat(jj+2,4));
        temp = temp * (double(p_oi_y(ii))^3*p2gmat(kk+2,1) + double(p_oi_y(ii))^2*p2gmat(kk+2,2) + double(p_oi_y(ii))*p2gmat(kk+2,3) + p2gmat(kk+2,4));
        temp = temp * (double(p_oi_z(ii))^3*p2gmat(ll+2,1) + double(p_oi_z(ii))^2*p2gmat(ll+2,2) + double(p_oi_z(ii))*p2gmat(ll+2,3) + p2gmat(ll+2,4));
        temp = temp * (double(p_q(ii)));
        gmem((mod((p_x(ii)+jj), numgpx)+1), (mod((p_y(ii)+kk), numgpy)+1), (mod((p_z(ii)+ll), numgpz)+1)) = gmem((mod((p_x(ii)+jj), numgpx)+1), (mod((p_y(ii)+kk), numgpy)+1), (mod((p_z(ii)+ll), numgpz)+1)) + temp;
      end
    end
  end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFT Prep
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Resize grid for proper FFT
mappedC = gmem;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTX Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in X dimension
fftx = fft(mappedC, numgpx, 1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTY Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in Y dimension
ffty = fft(fftx, numgpy, 2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FFTZ Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute FFT in Z dimension
fftz = fft(ffty, numgpz, 3);

% Apply Greens Function
fftzng = fftz.*grom;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTX Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in X dimension
ifftx = ifft(fftzng, numgpx, 1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTY Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in Y dimension
iffty = ifft(ifftx, numgpy, 2);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% IFFTZ Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute IFFT in Z dimension
ifftz = ifft(iffty, numgpz, 3);

% To save on C-based simulation runtime, the Greens ROM values in OpenMM were
% not multiplied by numgpx*numgpy*numgpz and the 3 1D FFT algorithms did not
% not divide by numgpx, numgpy, and numgpz, where appropriate. Since the FFT
% calls in MATLAB inherently perfrom the division, compensate for OpenMM
% adjustments by multiplying result of 3D FFT by numgpx*numgpy*numgpz
ifftz = ifftz*numgpx*numgpy*numgpz;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Force Check Values
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Pad the now potential grid with periodic repititon of 2D matricies so that
% we do not need to perform boundary checks when applying force coefficients
potmem = cat(1,  ifftz(numgpx,      :,      :),  ifftz,  ifftz(1:3,   :,   :));
potmem = cat(2, potmem(     :, numgpy,      :), potmem, potmem(  :, 1:3,   :));
potmem = cat(3, potmem(     :,      :, numgpz), potmem, potmem(  :,   :, 1:3));

% Create a nump by nnn1d by nnn1d by nnn1d matrix to hold force coefficients
% for each particle
fmemx = zeros([nump, nnn1d, nnn1d, nnn1d]);
fmemy = zeros([nump, nnn1d, nnn1d, nnn1d]);
fmemz = zeros([nump, nnn1d, nnn1d, nnn1d]);

for ii = 1:nump
  for jj = 1:nnn1d
    for kk = 1:nnn1d
      for ll = 1:nnn1d
        fmemx(ii, jj, kk, ll) =                         (p_oi_x(ii)^3*g2pmat(jj,1) + p_oi_x(ii)^2*g2pmat(jj,2) + p_oi_x(ii)*g2pmat(jj,3) + g2pmat(jj,4));
        fmemx(ii, jj, kk, ll) = fmemx(ii, jj, kk, ll) * (p_oi_y(ii)^3*p2gmat(kk,1) + p_oi_y(ii)^2*p2gmat(kk,2) + p_oi_y(ii)*p2gmat(kk,3) + p2gmat(kk,4));
        fmemx(ii, jj, kk, ll) = fmemx(ii, jj, kk, ll) * (p_oi_z(ii)^3*p2gmat(ll,1) + p_oi_z(ii)^2*p2gmat(ll,2) + p_oi_z(ii)*p2gmat(ll,3) + p2gmat(ll,4));

        fmemy(ii, jj, kk, ll) =                         (p_oi_x(ii)^3*p2gmat(jj,1) + p_oi_x(ii)^2*p2gmat(jj,2) + p_oi_x(ii)*p2gmat(jj,3) + p2gmat(jj,4));
        fmemy(ii, jj, kk, ll) = fmemy(ii, jj, kk, ll) * (p_oi_y(ii)^3*g2pmat(kk,1) + p_oi_y(ii)^2*g2pmat(kk,2) + p_oi_y(ii)*g2pmat(kk,3) + g2pmat(kk,4));
        fmemy(ii, jj, kk, ll) = fmemy(ii, jj, kk, ll) * (p_oi_z(ii)^3*p2gmat(ll,1) + p_oi_z(ii)^2*p2gmat(ll,2) + p_oi_z(ii)*p2gmat(ll,3) + p2gmat(ll,4));

        fmemz(ii, jj, kk, ll) =                         (p_oi_x(ii)^3*p2gmat(jj,1) + p_oi_x(ii)^2*p2gmat(jj,2) + p_oi_x(ii)*p2gmat(jj,3) + p2gmat(jj,4));
        fmemz(ii, jj, kk, ll) = fmemz(ii, jj, kk, ll) * (p_oi_y(ii)^3*p2gmat(kk,1) + p_oi_y(ii)^2*p2gmat(kk,2) + p_oi_y(ii)*p2gmat(kk,3) + p2gmat(kk,4));
        fmemz(ii, jj, kk, ll) = fmemz(ii, jj, kk, ll) * (p_oi_z(ii)^3*g2pmat(ll,1) + p_oi_z(ii)^2*g2pmat(ll,2) + p_oi_z(ii)*g2pmat(ll,3) + g2pmat(ll,4));
      end
    end
  end
end


for ii = 1:nump
  p_f_x(ii) = sum((squeeze(fmemx(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
  p_f_y(ii) = sum((squeeze(fmemy(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
  p_f_z(ii) = sum((squeeze(fmemz(ii,:,:,:)) .* real(potmem((p_x(ii)+1):(p_x(ii)+4), (p_y(ii)+1):(p_y(ii)+4), (p_z(ii)+1):(p_z(ii)+4)))), 'all');
end
